# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*














  sortByPrice = () => {
    const {result} = this.state
    result.sort((a,b)=>a.price-b.price)
    this.setState((prevState)=>
      ({ result: [] }))
    this.firstFetch();
  }

     sortBySize = () => {
    const {result} = this.state
    result.sort((a,b)=>a.size-b.size)
    this.setState((prevState)=>
      ({ result: [] }))
      this.initialCall();
    }

      sortById(){
    const {result} = this.state

    result.sort((a,b)=>a.id-b.id)

    this.setState((prevState)=>
    ({result:[...result]}))
  }



  const [products, setProducts] = useState([])
    const [isLoading, setIsLoading] = useState(true)
    const [limit, setLimit] = useState(15)
    const [sort, setSort] = useState("size")
    const [nextPage,setNextPage] = useState(1)

    useEffect(() => {
        const fetchProducts = async () => {
            
            const response = await fetch(`http://localhost:5000/products?_limit=${limit}&_page=${nextPage}&_sort=${sort}`);
            const json = await response.json();
            setProducts(json);
            setIsLoading(false);
            console.log(setProducts);

        }
    },)